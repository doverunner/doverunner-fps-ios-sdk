// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-tvos10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PallyConFPSSDKTV
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreData
import Foundation
@_exported import PallyConFPSSDKTV
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc public enum DrmType : Swift.Int8 {
  case playReady = 0
  case wideVine
  case fairPlay
  public init?(rawValue: Swift.Int8)
  public typealias RawValue = Swift.Int8
  public var rawValue: Swift.Int8 {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PallyConTokenInfo : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PallyConCustomDataInfo : ObjectiveC.NSObject {
  @objc final public let contentId: Swift.String
  @objc final public let userId: Swift.String
  @objc final public let optionalId: Swift.String
  @objc final public let liveKeyRotation: Swift.Bool
  @objc deinit
}
@objc public enum RenewalInterval : Swift.Int64 {
  case FiveMinute = 300
  case TenMinute = 600
  case FifteenMinute = 900
  case Default = 0
  public init?(rawValue: Swift.Int64)
  public typealias RawValue = Swift.Int64
  public var rawValue: Swift.Int64 {
    get
  }
}
@objc public class PallyConFPSSDK : ObjectiveC.NSObject {
  public static let mainm3u8Scheme: Swift.String
  @objc public init(fpsLicenseDelegate: PallyConFPSSDKTV.PallyConFPSLicenseDelegate?) throws
  @objc public init(siteId: Swift.String, siteKey: Swift.String, fpsLicenseDelegate: PallyConFPSSDKTV.PallyConFPSLicenseDelegate?) throws
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, token: Swift.String, licenseUrl: Swift.String = String(), appleCertUrl: Swift.String = String(), licenseRenewalInterval: Swift.Int64 = RenewalInterval.Default.rawValue)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, userId: Swift.String, contentId: Swift.String, token: Swift.String, licenseUrl: Swift.String = String(), appleCertUrl: Swift.String = String(), liveKeyRotation: Swift.Bool = false, licenseRenewalInterval: Swift.Int64 = RenewalInterval.Default.rawValue)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, userId: Swift.String, contentId: Swift.String, optionalId: Swift.String, liveKeyRotation: Swift.Bool = false, licenseUrl: Swift.String = String())
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, contentId: Swift.String, licenseUrl: Swift.String, appleCertUrl: Swift.String, liveKeyRotation: Swift.Bool = false)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, customData: Swift.String) throws
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, customData: Swift.String, appleCertUrl: Swift.String) throws
  @available(iOS 11.0, *)
  @objc public func getOfflineLicenseExpireDate(contentId: Swift.String) throws -> Swift.String
  @objc public func removeLicense(contentId: Swift.String) throws
  @objc public func getCustomDataInfo(from customData: Swift.String) throws -> PallyConFPSSDKTV.PallyConCustomDataInfo
  @objc public func getCustomDataForChromcast(userId: Swift.String, contentId: Swift.String, optionalId: Swift.String) throws -> Any
  @objc public func getCustomDataForChromcast(token: Swift.String) -> Any?
  @objc public static func getTokenInfo(from token: Swift.String) throws -> PallyConFPSSDKTV.PallyConTokenInfo
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AES256CBC {
  final public class func encryptString(_ str: Swift.String, password: Swift.String) -> Swift.String?
  final public class func decryptString(_ str: Swift.String, password: Swift.String) -> Swift.String?
  final public class func generatePassword() -> Swift.String
  final public class func randomText(_ length: Swift.Int, justLowerCase: Swift.Bool = false, whitespace: Swift.Bool = false) -> Swift.String
  final public class func aesEncrypt(_ str: Swift.String, key: Swift.String, iv: Swift.String) throws -> Swift.String
  final public class func aesDecrypt(_ str: Swift.String, key: Swift.String, iv: Swift.String) throws -> Swift.String
  @objc deinit
}
public enum PallyConSDKException : Swift.Error {
  case DatabaseProcessError(Swift.String)
  case InternalException(Swift.String)
  case ServerConnectionFail(Swift.String)
  case NetworkError(Swift.Error)
  case AcquireLicenseFailFromServer(Swift.Int, Swift.String)
  case GetContentInformationFail(Swift.String)
  case InvalidParameter(Swift.String)
  case UnauthorizedUserError(Swift.String)
}
@objc public protocol PallyConFPSLicenseDelegate : ObjectiveC.NSObjectProtocol {
  @objc func fpsLicenseDidSuccessAcquiring(contentId: Swift.String)
  @objc func fpsLicense(contentId: Swift.String, didFailWithError error: Swift.Error)
  @objc optional func contentKeyRequest(keyData: Foundation.Data, requestData: [Swift.String : Swift.String]) -> Foundation.Data?
  @objc optional func resourceLoaderRequest(_ requestResource: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class Customer : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PallyConFPSSDKTV.Customer {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PallyConFPSSDKTV.Customer>
  @objc @NSManaged dynamic public var siteCert: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var siteId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var license: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension PallyConFPSSDKTV.Customer {
  @objc(addLicenseObject:) @NSManaged dynamic public func addToLicense(_ value: PallyConFPSSDKTV.License)
  @objc(removeLicenseObject:) @NSManaged dynamic public func removeFromLicense(_ value: PallyConFPSSDKTV.License)
  @objc(addLicense:) @NSManaged dynamic public func addToLicense(_ values: Foundation.NSSet)
  @objc(removeLicense:) @NSManaged dynamic public func removeFromLicense(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers public class License : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PallyConFPSSDKTV.License {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PallyConFPSSDKTV.License>
  @objc @NSManaged dynamic public var cId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloadDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var licenseType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var optionalId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var persistentKey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var customer: PallyConFPSSDKTV.Customer? {
    @objc get
    @objc set
  }
}
extension PallyConFPSSDKTV.DrmType : Swift.Equatable {}
extension PallyConFPSSDKTV.DrmType : Swift.Hashable {}
extension PallyConFPSSDKTV.DrmType : Swift.RawRepresentable {}
extension PallyConFPSSDKTV.RenewalInterval : Swift.Equatable {}
extension PallyConFPSSDKTV.RenewalInterval : Swift.Hashable {}
extension PallyConFPSSDKTV.RenewalInterval : Swift.RawRepresentable {}
